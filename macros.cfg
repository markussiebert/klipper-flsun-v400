#############################################################################################################
#GCODE
#############################################################################################################
[gcode_macro led_on]
gcode:
  SET_PIN PIN=LED_pin VALUE=1

[gcode_macro led_off]
gcode:
  SET_PIN PIN=LED_pin VALUE=0

[gcode_macro logo_on]
gcode:
  SET_PIN PIN=LED_logo VALUE=1

[gcode_macro logo_off]
gcode:
  SET_PIN PIN=LED_logo VALUE=0

[gcode_macro ZUP]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.025 MOVE=1

[gcode_macro ZDOWN]
gcode:
   SET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=1


[gcode_macro SETUP_DELTA]
#  Purpose: Performs delta calibration - calibrates the fundamental geometry of your delta printer
#  - Resets Z offset to 0
#  - Homes all axes
#  - Runs delta_calibrate - measures tower positions, arm lengths, and delta radius
#  - Moves to center position at Z50
#  - Homes again
#  - Saves the calibration data
gcode:
  SET_GCODE_OFFSET Z=0
  G28
  delta_calibrate
  G1 X0 Y0 Z50 F4200
  G28
  save_config

[gcode_macro SETUP_BED_MESH]
#   Purpose: Creates a bed mesh - maps the surface variations of your print bed
#  - Homes all axes
#  - Moves to center position
#  - Runs bed_mesh_calibrate - probes multiple points across the bed surface
#  - Moves back to center
#  - Homes again
#  - Saves the mesh data
gcode:
  G28
  G1 X0 Y0 Z50 F4200
  bed_mesh_calibrate
  G1 X0 Y0 Z50 F4200
  G28
  save_config

[gcode_macro UNLOAD_FILAMENT] #unload filament
gcode:
    G91
#    G1 E10 F300
    G1 E-100 F800
    G90

[gcode_macro LOAD_FILAMENT] #load filament
gcode:
    G91
    G1 E50 F800
    G1 E30 F300
    G90
    
[gcode_macro M600]
gcode:
  PAUSE
  
[gcode_macro TMC]
gcode:
  DUMP_TMC STEPPER=stepper_a
  DUMP_TMC STEPPER=stepper_b
  DUMP_TMC STEPPER=stepper_c
  DUMP_TMC STEPPER=extruder
  


[gcode_macro save_time]
gcode:
    {% if printer.save_variables.variables.total_time %}
        {% set print_time = printer.save_variables.variables.total_time %}
    {% else %} 
        {% set print_time = 0 %}
    {% endif %}
    {% set print_time = print_time + printer.print_stats.print_duration/3600 %}
    SAVE_VARIABLE VARIABLE=total_time VALUE={print_time}

[gcode_macro SET_GCODE_OFFSET]  
rename_existing: _SET_GCODE_OFFSET
gcode:
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}
    {% else %} 
        {% set offsets = {'x': None,'y': None,'z': None} %}
    {% endif %}
    
    {% set ns = namespace(offsets={'x': offsets.x,'y': offsets.y,'z': offsets.z}) %}
    
    _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}

    {%if 'X' in params %}{% set null = ns.offsets.update({'x': params.X}) %}{% endif %}
    {%if 'Y' in params %}{% set null = ns.offsets.update({'y': params.Y}) %}{% endif %}
    {%if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z}) %}{% endif %}
    {%if 'Z_ADJUST' in params %}
        {%if ns.offsets.z == None %}{% set null = ns.offsets.update({'z': 0}) %}{% endif %}
        {% set null = ns.offsets.update({'z': (ns.offsets.z | float) + (params.Z_ADJUST | float)}) %}
    {% endif %}
    SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"

[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:  
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}

        _SET_GCODE_OFFSET {% for axis, offset in offsets.items() if offsets[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}

        { action_respond_info("Loaded gcode offsets from saved variables [%s]" % (offsets)) }
    {% endif %}

[idle_timeout]
gcode:
#   A list of G-Code commands to execute on an idle timeout. See
#   docs/Command_Templates.md for G-Code format. The default is to run
#   "TURN_OFF_HEATERS" and "M84".
timeout: 172800
#   Idle time (in seconds) to wait before running the above G-Code
#   commands. The default is 600 seconds.

####################################################################################################################################
#PAUSE ,RESUME ,CANCEL_PRINT
####################################################################################################################################
[pause_resume]

[gcode_macro PAUSE] 
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(0) %}      #edit to your park position
    {% set y = params.Y|default(-140) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
      G1 Z{z_safe}
      G90
      G1 X{x} Y{y} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

[gcode_macro RESUME]  
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### set defaults #####
    {% if printer["filament_switch_sensor filament_sensor"].filament_detected == True %} # detect if occur filament runout ,True : filament exists.  False:filament runout
      {% set e = params.E|default(1) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
      {% if 'VELOCITY' in params|upper %}
        {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
      {%else %}
        {% set get_params = "" %}
      {% endif %}
    ##### end of definitions #####
      G91
      {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E{e} F2100
      {% else %}
        {action_respond_info("Extruder not hot enough")}
      {% endif %}   
      RESUME_BASE {get_params}
    {% endif %} 

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  M106 S0
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  G28

##################################################
# Calibrations
##################################################

[gcode_macro SETUP_Z_OFFSET_CALIBRATION]
description: Measure Z-Offset
gcode:
  SET_GCODE_OFFSET Z=0
  G28
  G1 X0 Y0 Z50 F2500
  M400
  PROBE_CALIBRATE


[gcode_macro SETUP_ENDSTOPS_CALIBRATION]
description: Endstops Phase Calibration - moves to multiple positions for accurate calibration
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
    RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
    RESPOND TYPE=echo MSG="Starting endstop phase calibration..."
    
    # Initial homing if needed
    {% if printer.toolhead.homed_axes != "xyz" %}
      G28
    {% endif %}
    
    # Define calibration positions (delta printer coordinates)
    {% set positions = [
      {'x': 0, 'y': 0, 'z': 100},      # Center position
      {'x': 80, 'y': 0, 'z': 100},     # Towards A tower
      {'x': -40, 'y': 69, 'z': 100},   # Towards B tower  
      {'x': -40, 'y': -69, 'z': 100},  # Towards C tower
      {'x': 50, 'y': 50, 'z': 100},    # Intermediate position 1
      {'x': -50, 'y': 50, 'z': 100},   # Intermediate position 2
      {'x': 0, 'y': -80, 'z': 100}     # Intermediate position 3
    ] %}
    
    # Perform calibration sequence at each position
    {% for pos in positions %}
      RESPOND TYPE=echo MSG="Calibrating at position X{pos.x} Y{pos.y} Z{pos.z}"
      
      # Move to calibration position
      G90
      G1 X{pos.x} Y{pos.y} Z{pos.z} F3000
      M400
      
      # Multiple homing cycles from this position
      {% for cycle in range(3) %}
        G91
        G1 Z-80 F1500
        G28
        M400
      {% endfor %}
      
      # Run endstop phase calibration for all steppers
      ENDSTOP_PHASE_CALIBRATE stepper=stepper_a
      ENDSTOP_PHASE_CALIBRATE stepper=stepper_b  
      ENDSTOP_PHASE_CALIBRATE stepper=stepper_c
      M400
    {% endfor %}
    
    # Final homing and center position
    G28
    G90
    G1 X0 Y0 Z50 F3000
    M400
    
    RESPOND TYPE=echo MSG="Endstop phase calibration complete!"
  {% endif %}

[gcode_macro PRINT_START]
description: Start print sequence for Orca Slicer
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set HOTEND_TEMP = params.HOTEND_TEMP|default(210)|float %}
    
    # Set units and positioning
    G21                                    # Set units to millimeters
    G90                                    # Use absolute coordinates
    M82                                    # Use absolute distances for extrusion
    M107 T0                                # Turn off part cooling fan
    
    # Start heating
    M140 S{BED_TEMP}                       # Set bed temperature (don't wait)
    M104 S{HOTEND_TEMP} T0                 # Set hotend temperature (don't wait)
    
    # Wait for temperatures
    M190 S{BED_TEMP}                       # Wait for bed temperature
    M109 S{HOTEND_TEMP} T0                 # Wait for hotend temperature
    
    # Home and level
    G28                                    # Home all axes
    BED_MESH_PROFILE LOAD=default          # Load default bed mesh
    
    # Prime nozzle with circular pattern
    G1 F3000 Z1                            # Move to Z=1mm
    G1 X-150 Y0 Z0.4                       # Move to start position
    G92 E0                                 # Reset extruder
    G3 X0 Y-130 I150 Z0.3 E30 F2000        # Circular prime arc
    G92 E0                                 # Reset extruder again

[gcode_macro PRINT_END]
description: End print sequence for Orca Slicer
gcode:
    # Turn off fans and heaters
    M107 T0                                # Turn off part cooling fan
    M104 S0                                # Turn off hotend heater
    M104 S0 T1                             # Turn off T1 heater (if exists)
    M140 S0                                # Turn off bed heater
    
    # Retract filament
    G92 E0                                 # Reset extruder
    G91                                    # Use relative coordinates
    G1 E-1 F300                            # Retract 1mm of filament
    G1 Z+0.5 F6000                         # Raise Z by 0.5mm
    
    # Home and position
    G28                                    # Home all axes
    G90                                    # Use absolute coordinates

[gcode_macro MEASURE_ROTATION_DISTANCE]
gcode:
    M109 S230                          # Heat and wait for 230°C
    G91                                # Relative positioning
    G1 E50 F60                         # Extrude 50mm at 1mm/s
    G90                                # Absolute positioning

[gcode_macro HOME_CENTER]
gcode:
    G28                                # Home all axes
    G1 X0 Y0 Z30 F4200                 # Move to center at Z30